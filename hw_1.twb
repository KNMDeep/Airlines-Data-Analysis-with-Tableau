<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.18.0108.1735                               -->
<workbook source-build='10.4.3 (10400.18.0108.1735)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='clean' />
  <datasources>
    <datasource caption='Flights - 2010-2011 7m Extract Extract' inline='true' name='dataengine.1anp8271rj5k1i1b12zh81r7zy4p' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Flights - 2010-2011 7m Extract Extract' name='dataengine.1anp8271rj5k1i1b12zh81r7zy4pleaf'>
            <connection class='dataengine' dbname='C:/Users/mitra/Desktop/hw_1.twb Files/Data/0. Lund University/Flights - 2010-2011 7m Extract.tde' schema='Extract' tablename='Extract'>
              <calculations>
                <calculation column='[Number of Records]' formula='1' />
              </calculations>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='dataengine.1anp8271rj5k1i1b12zh81r7zy4pleaf' name='Extract' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Cancelled?</remote-name>
            <remote-type>11</remote-type>
            <local-name>[Cancelled?]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Cancelled?</remote-alias>
            <ordinal>0</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='boolean'>false</statistic>
              <statistic aggregation='Max' datatype='boolean'>true</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Diverted?</remote-name>
            <remote-type>11</remote-type>
            <local-name>[Diverted?]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Diverted?</remote-alias>
            <ordinal>1</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='boolean'>false</statistic>
              <statistic aggregation='Max' datatype='boolean'>false</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>16</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='integer'>1</statistic>
              <statistic aggregation='Max' datatype='integer'>1</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>actualelapsedtime</remote-name>
            <remote-type>4</remote-type>
            <local-name>[actualelapsedtime]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>actualelapsedtime</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>693</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>14.0</statistic>
              <statistic aggregation='Max' datatype='real'>749.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>airtime</remote-name>
            <remote-type>4</remote-type>
            <local-name>[airtime]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>airtime</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>670</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>7.0</statistic>
              <statistic aggregation='Max' datatype='real'>695.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>arrdelay</remote-name>
            <remote-type>4</remote-type>
            <local-name>[arrdelay]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>arrdelay</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1106</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>-139.0</statistic>
              <statistic aggregation='Max' datatype='real'>1632.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>15</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>arrdelayminutes</remote-name>
            <remote-type>4</remote-type>
            <local-name>[arrdelayminutes]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>arrdelayminutes</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1007</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>1632.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>carrier</remote-name>
            <remote-type>130</remote-type>
            <local-name>[carrier]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>carrier</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>11</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;AA&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;WN&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>carrierdelay</remote-name>
            <remote-type>4</remote-type>
            <local-name>[carrierdelay]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>carrierdelay</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>922</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>1626.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>depdelay</remote-name>
            <remote-type>4</remote-type>
            <local-name>[depdelay]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>depdelay</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1073</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>-144.0</statistic>
              <statistic aggregation='Max' datatype='real'>1626.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>14</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>deptime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[deptime]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>deptime</remote-alias>
            <ordinal>10</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <approx-count>2</approx-count>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dest</remote-name>
            <remote-type>130</remote-type>
            <local-name>[dest]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>dest</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>188</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;ABE&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;YAK&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>destcityname</remote-name>
            <remote-type>130</remote-type>
            <local-name>[destcityname]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>destcityname</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>184</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Adak Island, AK&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Yakutat, AK&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>deststate</remote-name>
            <remote-type>130</remote-type>
            <local-name>[deststate]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>deststate</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>51</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>distance</remote-name>
            <remote-type>4</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>distance</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1264</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>29.0</statistic>
              <statistic aggregation='Max' datatype='real'>4963.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>16</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>flightdate</remote-name>
            <remote-type>133</remote-type>
            <local-name>[flightdate]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>flightdate</remote-alias>
            <ordinal>15</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>699</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='date'>#2010-01-01#</statistic>
              <statistic aggregation='Max' datatype='date'>#2011-11-30#</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>origin</remote-name>
            <remote-type>130</remote-type>
            <local-name>[origin]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>origin</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>188</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;ABE&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;YAK&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>origincityname</remote-name>
            <remote-type>130</remote-type>
            <local-name>[origincityname]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>origincityname</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>184</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Adak Island, AK&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Yakutat, AK&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>originstate</remote-name>
            <remote-type>130</remote-type>
            <local-name>[originstate]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>originstate</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>51</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tailnum</remote-name>
            <remote-type>130</remote-type>
            <local-name>[tailnum]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>tailnum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3716</approx-count>
            <scale>2</scale>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;(null)&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;NBOGJB&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967294</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>17</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;wstr&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' hidden='true' name='[ActualElapsedTime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[Airline Description]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[AirlineID]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[ArrDel15]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[ArrTimeBlk]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[ArrTime]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[Arrival Delay Grouping]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[ArrivalDelayGroups]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[CRSArrTime]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[CRSDepTime]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[CRSElapsedTime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[CancellationCode]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[Carrier]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[DepDel15]' role='measure' type='quantitative' />
      <column aggregation='Avg' datatype='real' hidden='true' name='[DepDelay]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[DepTimeBlk]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[DepTime]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[DepartureDelayGroups]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[DestStateFips]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[DestWac]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[Dest]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[DivAirportLandings]' role='dimension' type='nominal' />
      <column datatype='boolean' hidden='true' name='[Divered reached destination?]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[FirstDepTime]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[LateAircraftDelay]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[LongestAddGTime]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[NASDelay]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' hidden='true' name='[OriginStateFips]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[OriginWac]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[Origin]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[SecurityDelay]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[TaxiIn]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[TaxiOut]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[TotalAddGTime]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[UniqueCarrier]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[WheelsOff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[WheelsOn]' role='dimension' type='nominal' />
      <column caption='Elapsed Time' datatype='real' datatype-customized='true' name='[actualelapsedtime]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[airlineid]' role='measure' type='quantitative' />
      <column caption='Airtime' datatype='real' name='[airtime]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[arrdel15]' role='measure' type='quantitative' />
      <column caption='Arrival Delay' datatype='real' name='[arrdelay]' role='measure' type='quantitative' />
      <column caption='Arrival Delay (Min)' datatype='real' name='[arrdelayminutes]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[arrivaldelaygroups]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[arrtime]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[arrtimeblk]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[cancellationcode]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[cancelled]' role='measure' type='quantitative' />
      <column caption='Airline' datatype='string' name='[carrier]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;AA&quot;' value='American' />
          <alias key='&quot;AQ&quot;' value='Aloha' />
          <alias key='&quot;AS&quot;' value='Alaska' />
          <alias key='&quot;B6&quot;' value='JetBlue' />
          <alias key='&quot;CO&quot;' value='Continental' />
          <alias key='&quot;DL&quot;' value='Delta' />
          <alias key='&quot;F9&quot;' value='Frontier' />
          <alias key='&quot;FL&quot;' value='AirTran' />
          <alias key='&quot;HA&quot;' value='Hawaiian' />
          <alias key='&quot;HP&quot;' value='AmericaWest' />
          <alias key='&quot;NW&quot;' value='Northwest' />
          <alias key='&quot;TW&quot;' value='TransWorld' />
          <alias key='&quot;UA&quot;' value='United' />
          <alias key='&quot;US&quot;' value='US Airlines' />
          <alias key='&quot;WN&quot;' value='Southwest' />
        </aliases>
      </column>
      <column caption='Carrier Delay' datatype='real' name='[carrierdelay]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[crsarrtime]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[crsdeptime]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[crselapsedtime]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[dayofmonth]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[dayofweek]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[departuredelaygroups]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[depdel15]' role='measure' type='quantitative' />
      <column caption='Departure Delay' datatype='real' name='[depdelay]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[depdelayminutes]' role='measure' type='quantitative' />
      <column caption='Departure Time' datatype='datetime' datatype-customized='true' name='[deptime]' role='dimension' type='ordinal' />
      <column datatype='string' hidden='true' name='[deptimeblk]' role='dimension' type='nominal' />
      <column caption='Destination Airport Code' datatype='string' name='[dest]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[destairportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[destairportseqid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[destcitymarketid]' role='measure' type='quantitative' />
      <column caption='Destination City Name' datatype='string' name='[destcityname]' role='dimension' type='nominal' />
      <column caption='Destination State' datatype='string' name='[deststate]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' hidden='true' name='[deststatefips]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[deststatename]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[destwac]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[dimAirlineID_AirlineID]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[dimDestAirport_Dest]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[dimOriginAirports_Origin]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[dimUniqueCarriers_UniqueCarrier]' role='dimension' type='nominal' />
      <column caption='Distance (Miles)' datatype='real' name='[distance]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[distancegroup]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div1airport]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[div1airportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[div1airportseqid]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[div1longestgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div1tailnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[div1totalgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div1wheelsoff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div1wheelson]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div2airport]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[div2airportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[div2airportseqid]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[div2longestgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div2tailnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[div2totalgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div2wheelsoff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div2wheelson]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div3airport]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[div3airportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[div3airportseqid]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[div3longestgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div3tailnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[div3totalgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div3wheelsoff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div3wheelson]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div4airport]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[div4airportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[div4airportseqid]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[div4longestgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div4tailnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[div4totalgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div4wheelsoff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div4wheelson]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div5airport]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[div5airportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[div5airportseqid]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[div5longestgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div5tailnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[div5totalgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[div5wheelsoff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[div5wheelson]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[divactualelapsedtime]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[divairportlandings]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[divarrdelay]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[divdistance]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[diverted]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[divreacheddest]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[firstdeptime]' role='dimension' type='nominal' />
      <column caption='Flight Date' datatype='date' name='[flightdate]' role='dimension' type='ordinal' />
      <column datatype='string' hidden='true' name='[flightnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[flights]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[lateaircraftdelay]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[longestaddgtime]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[month]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[nasdelay]' role='measure' type='quantitative' />
      <column caption='Origin Airport Code' datatype='string' name='[origin]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[originairportid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[originairportseqid]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[origincitymarketid]' role='measure' type='quantitative' />
      <column caption='Origin City Name' datatype='string' name='[origincityname]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Origin State' datatype='string' name='[originstate]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' hidden='true' name='[originstatefips]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[originstatename]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[originwac]' role='measure' type='quantitative' />
      <column datatype='integer' hidden='true' name='[quarter]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[securitydelay]' role='measure' type='quantitative' />
      <column caption='Aircraft Registration' datatype='string' name='[tailnum]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[taxiin]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[taxiout]' role='measure' type='quantitative' />
      <column datatype='real' hidden='true' name='[totaladdgtime]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[uniquecarrier]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[weatherdelay]' role='measure' type='quantitative' />
      <column datatype='string' hidden='true' name='[wheelsoff]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[wheelson]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[year]' role='measure' type='quantitative' />
      <column-instance column='[Airline Description]' derivation='None' name='[none:Airline Description:nk]' pivot='key' type='nominal' />
      <column-instance column='[carrier]' derivation='None' name='[none:carrier:nk]' pivot='key' type='nominal' />
      <column-instance column='[deststate]' derivation='None' name='[none:deststate:nk]' pivot='key' type='nominal' />
      <column-instance column='[originstate]' derivation='None' name='[none:originstate:nk]' pivot='key' type='nominal' />
      <column-instance column='[uniquecarrier]' derivation='None' name='[none:uniquecarrier:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Action (DestState)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:deststate:nk]' />
        </groupfilter>
      </group>
      <group name='[Action (Destination State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[deststate]' />
        </groupfilter>
      </group>
      <group name='[Action (Origin State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[originstate]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OriginState)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:originstate:nk]' />
        </groupfilter>
      </group>
      <group name='[Action (deststate)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[deststate]' />
        </groupfilter>
      </group>
      <group name='[Action (originstate)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[originstate]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.427692' group-percentage='0.180513' measure-ordering='alphabetic' measure-percentage='0.391795' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Airline Description:nk]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;US Airways Inc.: US (Merged with America West 9/05. Reporting for both starting 10/07.)&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Alaska Airlines Inc.: AS&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Atlantic Southeast Airlines: EV&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Pinnacle Airlines Inc.: 9E&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hawaiian Airlines Inc.: HA&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Expressjet Airlines Inc.: XE&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Comair Inc.: OH&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;AirTran Airways Corporation: FL&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;American Airlines Inc.: AA&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;JetBlue Airways: B6&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Frontier Airlines Inc.: F9&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Skywest Airlines Inc.: OO&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Continental Air Lines Inc.: CO&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;United Air Lines Inc.: UA&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Mesa Airlines Inc.: YV&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Northwest Airlines Inc.: NW&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Southwest Airlines Co.: WN&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Delta Air Lines Inc.: DL&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;American Eagle Airlines Inc.: MQ&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:uniquecarrier:nk]' palette='tableau-20' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;9E&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;PI&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;CO&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;ML (1)&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;US&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;MQ&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;FL&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;DH&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;DL&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;PA (1)&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;PS&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;NW&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;XE&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;OH&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;HA&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;WN&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;EV&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;YV&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;HP&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;OO&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;KH&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;UA&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;AS&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;TW&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;EA&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;F9&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;B6&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;TZ&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:carrier:nk]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;PS&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;US Airways Inc. (Merged with America West 9/05. Reporting for both starting 10/07.&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;9E&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Alaska Airlines Inc.&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;TZ&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Atlantic Southeast Airlines&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;RU&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;XE&quot;</bucket>
            </map>
            <map to='#32a251'>
              <bucket>&quot;FL&quot;</bucket>
            </map>
            <map to='#32a251'>
              <bucket>&quot;US&quot;</bucket>
            </map>
            <map to='#39737c'>
              <bucket>&quot;NW&quot;</bucket>
            </map>
            <map to='#3cb7cc'>
              <bucket>&quot;DL&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;OH&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Pinnacle Airlines Inc.&quot;</bucket>
            </map>
            <map to='#82853b'>
              <bucket>&quot;TW&quot;</bucket>
            </map>
            <map to='#86b4a9'>
              <bucket>&quot;WN&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hawaiian Airlines Inc.&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;EV&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Expressjet Airlines Inc.&quot;</bucket>
            </map>
            <map to='#98d9e4'>
              <bucket>&quot;F9&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Comair Inc.&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;DH&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;YV&quot;</bucket>
            </map>
            <map to='#acd98d'>
              <bucket>&quot;AS&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;AL&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;AirTran Airways Corporation&quot;</bucket>
            </map>
            <map to='#b85a0d'>
              <bucket>&quot;HA&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;American Airlines Inc.&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;MQ&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;PA&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;JetBlue Airways&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Frontier Airlines Inc.&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;PI&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;ML&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;OO&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Skywest Airlines Inc.&quot;</bucket>
            </map>
            <map to='#ccc94d'>
              <bucket>&quot;UA&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Continental Air Lines Inc.&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;United Air Lines Inc.&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;HP&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Mesa Airlines Inc.&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Northwest Airlines Inc.&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Aloha Air Cargo&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Southwest Airlines Co.&quot;</bucket>
            </map>
            <map to='#ff7f0f'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Delta Air Lines Inc.&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;EA&quot;</bucket>
            </map>
            <map to='#ffb977'>
              <bucket>&quot;CO&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;AQ&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;American Eagle Airlines Inc.&quot;</bucket>
            </map>
            <map to='#ffd94a'>
              <bucket>&quot;B6&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;UNITED STATES&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <field-sort-info field-sort-order-type='alphabetical-order' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Flights - 2010-2011 7m Extract Extract' name='dataengine.1anp8271rj5k1i1b12zh81r7zy4p' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='dataengine.1anp8271rj5k1i1b12zh81r7zy4p'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Flight Date' datatype='date' name='[flightdate]' role='dimension' type='ordinal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[flightdate]' derivation='Day-Trunc' name='[tdy:flightdate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <lod column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</rows>
        <cols>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='12' text-width='240'>
            <formatted-text>
              <run bold='true' fontcolor='#ffffff' fontsize='12'>Independence Day!!!</run>
              <run>Æ&#10;</run>
              <run fontcolor='#ffffff'>Æ </run>
              <run bold='true' fontcolor='#ffffff'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]&gt;</run>
              <run>Æ&#10;</run>
              <run fontcolor='#ffffff'>Number of Records: </run>
              <run bold='true' fontcolor='#ffffff' fontsize='10'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]&gt;</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                      </x-fields>
                      <y-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>9352</value>
                    <value>#2010-07-04 00:00:00#</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='1' y='102' />
          </annotation>
          <annotation class='point' id='1' mark-position='1' pullback='12' text-width='240'>
            <formatted-text>
              <run bold='true' fontcolor='#ffffff' fontsize='11'>Christmas Holiday!!!</run>
              <run>Æ&#10;</run>
              <run fontcolor='#ffffff'>Æ </run>
              <run bold='true' fontcolor='#ffffff'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]&gt;</run>
              <run>Æ&#10;</run>
              <run fontcolor='#ffffff'>Number of Records: </run>
              <run bold='true' fontcolor='#ffffff' fontsize='10'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]&gt;</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                      </x-fields>
                      <y-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>7842</value>
                    <value>#2010-11-25 00:00:00#</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='0' y='71' />
          </annotation>
          <annotation class='point' id='2' mark-position='1' pullback='12' text-width='180'>
            <formatted-text>
              <run bold='true' fontcolor='#ffffff' fontsize='11'>Christmas Holiday!!!</run>
              <run>Æ&#10;</run>
              <run bold='true' fontcolor='#ffffff'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]&gt;</run>
              <run>Æ&#10;</run>
              <run fontcolor='#ffffff'>Number of Records: </run>
              <run bold='true' fontcolor='#ffffff' fontsize='10'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]&gt;</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                      </x-fields>
                      <y-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>7633</value>
                    <value>#2011-11-24 00:00:00#</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='-81' y='88' />
          </annotation>
          <annotation class='point' id='3' mark-position='1' pullback='12' text-width='180'>
            <formatted-text>
              <run bold='true' fontcolor='#ffffff' fontsize='12'>Labor Day eve!</run>
              <run>Æ&#10;</run>
              <run bold='true' fontcolor='#ffffff'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]&gt;</run>
              <run>Æ&#10;</run>
              <run fontcolor='#ffffff'>Number of Records: </run>
              <run bold='true' fontcolor='#ffffff' fontsize='10'>&lt;[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]&gt;</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                      </x-fields>
                      <y-fields>
                        <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]</field>
                      <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[tdy:flightdate:qk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>9099</value>
                    <value>#2011-09-03 00:00:00#</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='0' y='62' />
          </annotation>
        </annotations>
      </table>
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Flights - 2010-2011 7m Extract Extract' name='dataengine.1anp8271rj5k1i1b12zh81r7zy4p' />
          </datasources>
          <datasource-dependencies datasource='dataengine.1anp8271rj5k1i1b12zh81r7zy4p'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Airline' datatype='string' name='[carrier]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AA&quot;' value='American' />
                <alias key='&quot;AQ&quot;' value='Aloha' />
                <alias key='&quot;AS&quot;' value='Alaska' />
                <alias key='&quot;B6&quot;' value='JetBlue' />
                <alias key='&quot;CO&quot;' value='Continental' />
                <alias key='&quot;DL&quot;' value='Delta' />
                <alias key='&quot;F9&quot;' value='Frontier' />
                <alias key='&quot;FL&quot;' value='AirTran' />
                <alias key='&quot;HA&quot;' value='Hawaiian' />
                <alias key='&quot;HP&quot;' value='AmericaWest' />
                <alias key='&quot;NW&quot;' value='Northwest' />
                <alias key='&quot;TW&quot;' value='TransWorld' />
                <alias key='&quot;UA&quot;' value='United' />
                <alias key='&quot;US&quot;' value='US Airlines' />
                <alias key='&quot;WN&quot;' value='Southwest' />
              </aliases>
            </column>
            <column caption='Flight Date' datatype='date' name='[flightdate]' role='dimension' type='ordinal' />
            <column-instance column='[carrier]' derivation='None' name='[none:carrier:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[flightdate]' derivation='Week' name='[wk:flightdate:ok]' pivot='key' type='ordinal' />
            <column-instance column='[flightdate]' derivation='Year' name='[yr:flightdate:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <sort class='manual' column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;WN&quot;</bucket>
              <bucket>&quot;DL&quot;</bucket>
              <bucket>&quot;AA&quot;</bucket>
              <bucket>&quot;US&quot;</bucket>
              <bucket>&quot;UA&quot;</bucket>
              <bucket>&quot;FL&quot;</bucket>
              <bucket>&quot;CO&quot;</bucket>
              <bucket>&quot;B6&quot;</bucket>
              <bucket>&quot;AS&quot;</bucket>
              <bucket>&quot;F9&quot;</bucket>
              <bucket>&quot;HA&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]' />
              <size column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]' />
              <text column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]</rows>
        <cols>([dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[yr:flightdate:ok] / [dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[wk:flightdate:ok])</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='Flights - 2010-2011 7m Extract Extract' name='dataengine.1anp8271rj5k1i1b12zh81r7zy4p' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='dataengine.1anp8271rj5k1i1b12zh81r7zy4p'>
            <column caption='Airline' datatype='string' name='[carrier]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AA&quot;' value='American' />
                <alias key='&quot;AQ&quot;' value='Aloha' />
                <alias key='&quot;AS&quot;' value='Alaska' />
                <alias key='&quot;B6&quot;' value='JetBlue' />
                <alias key='&quot;CO&quot;' value='Continental' />
                <alias key='&quot;DL&quot;' value='Delta' />
                <alias key='&quot;F9&quot;' value='Frontier' />
                <alias key='&quot;FL&quot;' value='AirTran' />
                <alias key='&quot;HA&quot;' value='Hawaiian' />
                <alias key='&quot;HP&quot;' value='AmericaWest' />
                <alias key='&quot;NW&quot;' value='Northwest' />
                <alias key='&quot;TW&quot;' value='TransWorld' />
                <alias key='&quot;UA&quot;' value='United' />
                <alias key='&quot;US&quot;' value='US Airlines' />
                <alias key='&quot;WN&quot;' value='Southwest' />
              </aliases>
            </column>
            <column caption='Departure Delay' datatype='real' name='[depdelay]' role='measure' type='quantitative' />
            <column-instance column='[carrier]' derivation='None' name='[none:carrier:nk]' pivot='key' type='nominal' />
            <column-instance column='[originstate]' derivation='None' name='[none:originstate:nk]' pivot='key' type='nominal' />
            <column caption='Origin State' datatype='string' name='[originstate]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[depdelay]' derivation='Sum' name='[sum:depdelay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]'>
            <groupfilter function='level-members' level='[none:carrier:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:depdelay:qk]' reverse='true' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#8b092e</color>
                <color>#901538</color>
                <color>#962344</color>
                <color>#9c3150</color>
                <color>#a1415c</color>
                <color>#a7526a</color>
                <color>#ad6378</color>
                <color>#b37687</color>
                <color>#b88997</color>
                <color>#be9ea7</color>
                <color>#c4b3b8</color>
                <color>#cacaca</color>
                <color>#b4b4c6</color>
                <color>#9e9ec2</color>
                <color>#8a8abe</color>
                <color>#7676ba</color>
                <color>#6363b6</color>
                <color>#5151b2</color>
                <color>#3f3fae</color>
                <color>#2e2eaa</color>
                <color>#1e1ea6</color>
                <color>#0e0ea2</color>
                <color>#00009f</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:depdelay:qk]' />
              <text column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:depdelay:qk]' />
              <lod column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:originstate:nk]' />
              <geometry column='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[Latitude (generated)]</rows>
        <cols>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' maximized='true' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='218'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[avg:depdelay:qk]</field>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[dy:flightdate:ok]</field>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[mn:flightdate:ok]</field>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]</field>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[yr:flightdate:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card pane-specification-id='6' param='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:Number of Records:qk]' type='size' />
            <card pane-specification-id='6' param='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]</field>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[yr:flightdate:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='270'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]' type='filter' />
            <card pane-specification-id='0' param='[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[sum:depdelay:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.1anp8271rj5k1i1b12zh81r7zy4p].[none:carrier:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nOy9eZgdxXku/lavZz8zGs2MdiGQEBgQCBAO2AYcO/GSkGsH208cJyG5Wa5/
      2WPnxrGdOHmur5Nrcu3khjib8zgL11ntxOT68YYxYLMYLDAgMGjfR9Lsc9be6/fHOV9NdZ3u
      M2ckIQno1xYz011dXd39fVXfXmxmZobncjlkyHCmCIIArVar5zjnHIwxMMZgmiZs2wZjDGEY
      IooiGIYBxth5GDFg5HI5FAqF83LzDC8fcM7RbrdhmiYACILWNA1RFIk2xWIRtm3D9304jgMA
      sCwL+Xw+te8wDNFsNlEoFGAYxmmPjyAz2+n1liGDhCiK0Gq14LqumO0BwDAMWJaFZrMp2oZh
      KM5VKhVEUQRd1/v23263EQQBPM/rywDUt9of5xz1eh2apqFYLIJzDs45wjDMGCDDmSMIAjiO
      I8QcYgDOuZj9NU2DZVmQxW1d15ec0cMwhOd5ACBWlyQQkXPOUS6XRb+0Mtm2DcdxMD8/D9u2
      wTlHEATQzujJM7yiwTmH7/vwfR+apsWIX9M0lEolMSvncjkUi0UwxuA4DhYWFlCr1cT5JERR
      hFqtJsSXKIpioowM0i+IEXzfB9BhTsMwBMFHUSRWlDAMMwbIcPpot9uo1WpC9JFBBGZZVuy4
      53loNpsIw1AQJIkkKnzfF7M/5xzNZjOVAYDOCkGrCvXZbrfRaDSg6zrK5TJ0XRcKOJDpABlO
      E1EUwXVdMMZicj/nXBC9aZpgjEHXdei6jiiKEEWRUIKpD9d1EUURisViTH63LAvFYhGe5yGK
      InGvNNB9iHFKpRJ0XRdilK7r4nr6ma0AGU4L8uzOGEMulxNEZVmWMHUSoQNArVZDu92G53mC
      aTzPg+u6Qo9QrTWlUgmFQgGapgkdgGZ3VSSivqhvzjkMw0AURaJvTdPENYyxjAEynB5M00QU
      Rcjn84LYZQI1TRNBEKDRaIhjKmTRh3MO13XRbrdjbaMoEvK867qYn59HFEUIggDz8/Oo1+uC
      wfL5PCqVihBzyMxKfoZ2uy3O0T0zBshw2iiVSsjn82KG1jQNtm3Dtm2EYYiFhQXBGIwxWJYF
      wzCErA4gJtaQaZIIGujoGb7vi9nbMAzU63W4rgugM+sToQMd5Tufz4uZnqxT1L+8+gCZDpDh
      DCATFmNMWHk458IjTGJSs9kUOgNB9hBTf77vo91uo1QqAQCKxSIsy0Kj0UAURUJ5JaZgjMUY
      hhjLsizBAPK9ZOLPRKAMZwVk4yfC8jwPQRCAMSZs7p7ngTEmnGMq8corgWwZIjle9RRTm6QQ
      Cl3XYVmWIH5amQqFAorFIoBFkSxbATKcdViWJSwuZP2hcJsgCIT4AsTDEogJfN/H/Pw8gA6h
      k31fZhJ59bFtW/xO58jraxiGGEsURajX67GxZgyQ4ayDZnpg0X4viz+yNcayLARB0OMLoJUh
      CALRJ0FuJ/dVq9WgaRrK5bJYfWTU63WEYZgpwRnOLcIwhKZ1SI0IFuiIKqpZEoBQdpPEG5rd
      CbTakH4gm13V68haRX8zxrIVIMOLC8YYKpUKfN8HYwyNRgOGYXTicLqWI1oxSF8gD24/pxeB
      lN4wDHvEpKSxEATTNZtNnoVDZzgXIKuMrutwHAfFYlHM5hRTBECYKum4aZooFApwXReapgmx
      qFAowDRNsYqQeJMWXRqGYUwx5pxnDJDh/ILCFNrtds85ImbyLVA4BBAXpc4EmQiU4bzB9/2Y
      VUYNgygWi8KJBiBG8GcrgyxTgjOcEUj0GEReH6QvmtlV4n+xkK0AGQYGEXkQBMJ0SZGahUIh
      ZmUZBKZpolQqiTBncmBRKMO5QMYAGQYC2fPlWBp51m+1WgjDMEa8NKPL4Q4qLMuKObrOdXJ8
      xgAZBoJsXUkjUtd1Rd6uaZpot9vCk1sqlVJn9fNB+IRMB8gwMGTvrgzVvu55XiyJJQiCWGrj
      hQBKjcwYIMPAMAxDOK7kILYkkE2fQJUjzhcTUCxQo9GA7/siOScTgTIMDMrQopgbOY4/jRFk
      gnccR0SDnqnII0eOBkEgHGJpaLfbIh6JinFFUZQxQIblIWlmTyI8Nf2Q0Gw2RXLM6YB0DM45
      FhYWBPPpui5ygJPGIqdRygFxmQiUYWDIGVUk3w8SsCYHoAFI9PoOCkpppJBq6lOuH6SOmaJR
      VesUkDFAhmXA8zyRkaVmV8mQZ1wCtdN1HcViEb7vn5ZOQP4HtaRnWmhEWhQoIROBMgwEmv2B
      XquPygSqj4DaUPCa4zgiKI1ifQYdA6VaMsaQz+dF2RM5KV+FaZqoVCqx/GLqL1sBMgwEytRS
      j6W1lUFFqaIowsLCQqz8CYVRqCVOko7JqZJUMJdMs7Zt96wAlDBPXmbSHbIVIMNpwTTNGBMs
      VahKLofearVEGDOdI+WVguJs20YulxMpjAsLCwCAarUKTdOE/K+WUtF1HWqJf1otyOJDCTZy
      tWpN07IVIMNgoApuKtKUYCqWVSgURClEIJ63SwRJ/VLNUCplUi6XxZ4DMtGqPghV6ab70OpC
      YRr0j66PoihjgAyDI4nI5J+yiEL7ANRqtViKohzPr+s6XNcVq4pqJaLZm/IF6Bp5HLJFSoZs
      avV9XzAWncvMoBkGBpUW7AdZtqYyKc1mM5E4CXLxWxmkKDcaDcFcjuPEKj3LSArHJqcdMYG6
      8mRm0AwDg8yfsmlT/UngnMcqwfUTkdLOhWEoZnxV8e6X7pjUVy6XE+EbSYp1xgAZ+oIUTXnm
      TCJ+Ol8ul8UuLOrMrBJ9Uj9JREqgxHq1lhBjLHElATqrydDQUCz/WEbGABn6Qo7pB+KWH3UG
      lyvEUaVmtS+ZuFVnmdq/fA/GOmUTVR2AkFQKRe6DKsOpDJQxQIa+YIyhWq3GvK6qF5gIW67l
      Q4qsvGqoSS9quESSIiuDzKhJmWeygysNcvIN9Z8xQIa+kE2alUpFeFtV4k2yEKkrhUq08qyt
      tlcZh+C6bs8+AsSASWZa9VnK5XJsO6dzygAkTzabTdTr9Z4HyXBhwzCMWAVoIB73IyuolUoF
      lUoltokGOb7UFaBfOqS8ygAQ8UNJ+kOaHqD2R04zzvm58wRzzkUyAsH3fQRBIF4qtUsLbDqf
      IKXudPepfbmAYnfkAlOUByyHOBMzcM7FvgCapok0SRnyt0/SMVQmUNtRm356gAwyswLnSAcg
      b1wSh6pFkZKW0wsB09NzuPPOr+HAgWNnrQzISxVk5qSdIOVdYmRQjH4ulxO7xVA0J9ArAsk/
      k35PUpqBRT1j0BwDwzBQrVY726kO/tinD9r/iZDkNLmQ4Xk+7rzzYdx7b4Avfelh/MZvbECl
      YuGmm16FYjF9h/OXK0zTRC6XEzN7GsIwFKt+kh6g/i7nGCRZitQEG/X65UycVJf0nEy1pHRQ
      waN8Po9isYhqtYpqtXrBiRW0m2FHbGvik598EPfd53eVKA35PMdHP7oP99zzXbiuhwMHjmDP
      noOo1xuviJWBQpuX+m5UP0g1oSYRsTwp9vMeyxYodYtVNeBuoGc5F7VBL1S5PglBEOCzn30Y
      tVoTs7Mc3/52DSdP5gB0Pkih4MIwGGo1C2NjPi65RMOhQ21MT1tYu9bDZz5zG4aHq+f3IU4T
      afb9M+mv3W73rP7yPZIiSuXZn/QuVQ+Qr5XHSyVY1OdIe7ZzMvWmafgXGsIwxF/+5UP4zGdm
      wTkxa1zEabUWkzcmJ03cfHMOH/zgTfiTP3kCTz0F7N59DDfcUE58+S+FCcBxHORyubPyvShp
      BYAohx5FkdjPl3ZvoV1j5KrQdD1BJXQ6pp7zPA+NRgOapgnHF6Fer4vNM8Q9XunVoeklhmGI
      v/mbh/HpT88gigYn1KEhDzt25PH4420sLFjI51184APrwLmOZ5+dQz6v4/DhJi69tIwf+ZEr
      sX79+AU9GdRqNRFIdjbHKYcwp/VLOoMc1+P7fkzUSlox6DiBzlM4thwHROK4uO6VzABRFGH3
      7iN44YWTePDBU/jmN0Np5j8T0AeKf+jRUR+33FLCHXdsx/j4SKzS2lKz3YsBmfkpytLzPDSb
      TRHOrLY9k3FRCZMgCERsPvkFaHWkVYDuFwSBaEMyP7WVRSBZzJYZRPZdqMQPJDBAkrzuOI4o
      cUeDuZBnsUHAOcfs3Bx+6Rfvw+7dybmkLxYKBQdr1wKWBawctfAjP3IxXvOaV4Fzjp079+CZ
      Z05hx45V2HbVloHzZZeLIAjQbDbF9kKVSgVRFInN6QzDiIkLFLcv+2yWey/ZBEpIizOSr02q
      Ei0TftJ18jF5l0gVMQbgnIuNxEzTFEnHrVarZzPiXC7X8aR1lyc5Uydtf6cLCUEQ4BOfuA//
      /M+nX6LjTME5BweHrke49NIAAMOePRrC0IBh+LjlFhsf+tDNGFkxdFYVU5K3ibjy+byYXZvN
      pmhbrVZFeqLjOPA8D9VqVfRDWGpsjuNgfn6+p7ao3AdZi9QNtGnmXorg6RoSc+QVi3wE5XK5
      5xohXNHyRyZA13VhWRbCMIyZlkgzb7VaMe8bDYzyL1UF5EIC5xwPP/Is/u3f6jj/adEMYajj
      +efjce5BYOK++yIcPnwv3v/+y3Ht9sXVIMn6IYPO0eZ01J487zSZUYhwvV4X+3apREkMQE5M
      2rKIHJtEtGnhxkAnCE3TNDGx0jPI47UsSyjIshQi+wfU1YKuVcUiAiXKqzkF8vMZtDcT1U2k
      DH56UJmj0rRwujG99CAI4Hme8AReiCLTY49NIAzPN/EDHX0h/d3s22fg139tN9705j340Aff
      Kr4L5xz5fD7xm5BsTd9WrsND1hHqo1arAeit+AZ07OqkG8iKKf1NqwaJTpVKJdE3oGkahoeH
      Ua/XEy03crskIldXDFW8UfUTCpmmMoxpjlbP82C02+2YsyKKothFuq6jUCj0mKgI8uDkMnm0
      ktDSRy/9QsHBA20AydlF5wKL73LpicH3DUxOBjElUk4NVAkpCAJBbLQhHc3gcpnytH255FAF
      2tVRnuA8z4vl8dK3r9frYnNqddIj7zEFQKrELHuA5fvLiqvcH1WCkGOOSIQLggC2bcN1XXDe
      2UhbzRijMRtyx/Sz1WrBtm3RObmN04KN5AdIepEUB1IsFi+IsIdnntmPJ588fx7bKDaR9F8B
      VNB7pZLj5XI5FoVJVhz6FrK1pVqtCqK2LCsxz1dd1el6OicXplJncTJjymKRPDbaRUbe/FoW
      p9X+kqQGGh+JVY1Go+ccY0zkB5CeI+cB0Arm+36yAOw4DlzXFQRLM4nKALJsJisnSSITFTIi
      PeF8iEScczz//BF85CNPw/POvfjTUXpVnN57IPGjVqvFgtGSAswodMF1XZFrSyt0mni61PeR
      V/sky04QBFhYWEjc60vOFSYFWx636jOQaYlzLhR3ABgaGhKMJ49DXUVIjyFdiFawGBWo8hl5
      7+TSFUna/6B2bFomDcPou2PI2UIURbjnPx+B02ao1Xw8++w8du704TgXjii2XKjEFkURms2m
      MGnqug7TNGOGC9u2hfgpr8ryd1O/mfq3SvBJlpiksdGKQJMejSufz4tZXAWNSw2OK5VKIqya
      KlWEYSh8FjTz04qVy+Vik628N7GmaR0dIOklyxckxXHIbeRVQD6e1ifQefn9lKazhTAM8Sd/
      sg+1hSHpaJz41dklbcxLYann50DC7H96kFdZefyO48Q2jpatP0nfMkncSDN2JFld5GemkAaa
      3R3HEW2iKOpRsqlkCjGn7ACjexGhkrxvGAZ83xdFusjK5XmeSHIh8zyNlcRECsSkEAzSSWLU
      pxLCIDJZmpw2SNt2uy18DS+GSFRvNBAG6bM9iSRJyn23Qd9xyUTGu7K82lq8y+UNvS/k8Sbl
      1apiEO3OIo9ZFV/SLC/y70ltVWWWzJ1pY5TfGW2Ykc/nhZ5CtBCGoQi3pvtRmXPqO5fLIZfL
      od1uo91ugzEWs4wxxlCpVMT91ZAKTdPSV4BUoliifT/7tNqW/A75fP6s7wnrOC4+9WdfRbOV
      BwdPIM2liZKYg64Uq16CrEmyfDrBD271WQr9lEM6v9T3U79XkiFDnZEH6Yv0xUHGKBM6OdhI
      t5HTFomJPc8T5k1iNNpom0yeKpKqyJGvodlsxvMBZBOU/Ld6XD6vvjz1BSa9ILk/shCRcna2
      kMvZ+K3f+lH81E8OQWPhGc3AJL5EKe8hqa18pPNKWCITng7SiDRpbGmKar++6HeaJZNWBbmt
      OqlRbc+kMRIKhQKGhoYEoRPhq6sTyfQkwliWJa4hSw8RM608abnBJKrJ70NTG6iK7VIiQBJx
      y/0NOoNQ3HhSha/ThW1b+LVfuxWf+MRWrBofLF90KZwWI3FAi71LRdc4wzHJ7znpm1CbpOtk
      JVOdsOTf0wwe1EbuZ6kx0obYdK1csJb6phBpqv3veZ6QEhYWFoRIJ1/XaDQwPz8v9jNWx5jE
      4D1WoCRlaBDFluS/fkhbFmXHDNWXORsbqQGdGfD1r78KF100il//9Udw5Eh3djnjngcFi1F4
      hxBiZ5ctcqqTTFoG1VLfUmYa2YGpyv9p4pWqGySZYJPGSI46UkZplaEoAvrp+744RzO3vL+X
      uvLJ92w0GiIUgorwkuWLwnWCIIChDlTtqB9khWspS1DSS00yrZGWT8kSZwubNq3CX/zFzfj5
      n/8mJiY0gPfOwi8aU0i+LiL4mB6xjDsnfS96hxT+IOtT6qyXFChG59QVQTVDpk2I9LdlWSIE
      Ro3NUSdHInS5YrNKd3Ss0WiIxPqkFYjoSA2XpjpB6vPSPsYAoA0yu6svXu1UviZphlE/RtIH
      EApml6HOtk4AAGvWrMR737sBSSIIY+kSOpP+JbNJV55kTPxT+07tky1PN5BlclWnWkpsTXrf
      STqbHOAYe8oUcVduR45TuY808Vi+lwqV4ciUq4pr9E5U/SHp2ZOeRZMHqT5kPyy1cgxCvKr8
      KX8AcpioD3umeMMbrsCqVfEYmH6iliBS+tclV2UOTGeefn0vY8VN64WIrZ+u1Y8xZNFEZY5B
      HJXy9fQtydxIQZbyGNVnlS1Gqg6q0pMsNQwy0crPlPaOU71QSTeQoS5x6o1kDpc5NOnB1HtS
      30EQoN1uIwxDUeYawJKbIvdDPp/Dpz51K7785T04dKiORjPAnt0OZmZzie0l6UWMUX2ZWgJh
      yUfEu1H75nxg0YtMsmmKrTyRyF5g3/dF2ID63tUZM21VUFdsVSSi3ymIkkQbEktIbu/nSV5K
      gaaf1E/aphtpSKNnTe44ieMG4aR+M78qZ/YbpHyOGIdCstvttnD5n4l4xBjDxRevwS/90q24
      7roq3vmOjTCtbu37Aa7vtONCbteUFxt1/9G9qN+0vgeZ+5Nkbvm9ygRBWXv0jwgy9VkSxJy0
      d5u0UgOdUAsqQU5MIKc6yisCjT9NglB1DvkcxS8tVfpkOfScagZNewFLQRVrTgf08EkPyzkX
      sUnL6T8IA5w8dQov7NknFKC3vOVa7Nt3GGvW5GB0CSZxPFBmXiyKQvF2SdeeHci6hCqjc857
      ZlcAPbOlKgolEUqSTpB0jkLcaT8Auj/t8yWHX8tMSUk3MbGSLcYK0XuWQz3kccgxaWk6ijze
      pejZUC9MuijtBcnH5GVt0KUtqQ95dmm324mRpZx3LAP0cvs9ZBiG2PXcXvzTPz2Pxx9rA9zD
      F77w9q73sYQdO7biySe/DWAEGtMQsR4DUezvJHGHxtQrML04UEWQpHOLY1pMek/6rklilPqT
      ztFsbtt2qpma8060JomttALJJk01z5ciRufm5mL99Hvufoy6HHoWDJD2cpYi/iTRKIno1Zdp
      GIYIklI/KIk/ctx40hgajQby+XxiHRvOORZqNUxPz+A33/8dTE2VAORxySUQO5gAwLZtW/GO
      dzSwf/9+TE3neohf3Fd5L/1bLbJCR8YfnDHEfdLO92XA3nby6qCeV2V7+j3JMkORmHK/lFAj
      b0NE+oYMVV6n7VYppKEfMSc983L8HnK/9Jy2bcMwjE7Gm3yhSoD9BpEkryW1o2OyvFqpVGLJ
      E2kDVWezJEWG5EJZfOGc48mnduPO//UUZuc4Gg0bRJKHj5j45V/5D1QqFvI5A4wB997bQquV
      74oZJOfHIf8tniVh9hR/x99AzztJRidqiX5PjF9KmO2WInYSG6Mo6qmMkKTgJoVPkLeWYvfJ
      mUR9JxE+AJEeq4o3lmUJcahWq8G2bXE/yhyjcclQ9YKkNnJbIE7PctyZrutxBiCQ3NjP0jKI
      rpBE3KTMyOYvlYHU1SQt5Fre9oaiCV3XxT/9y6P46786hVYrtxjI1p2HA9/Ao48CQAQGr9tX
      PGKUsQ7pLaUYR7wrW3cV1URrUIejEkPh1L4ZeY35Yst+71lF2veybVtYY1Tnoyxr0zEZ9G1I
      HCWFOggCUU4laYam8SQp7ARKslL1PApVbjabscK6S0kjaedkMZq2XSUnWaIZNGlGp5eURKiq
      +JIkd8nnG40GqtWqkBUZY2JGSFreiCGpcgBFEMpyJK0An//8d3DX/5lFGNk95ksoBL0UcSVd
      o7RIdXSp/SS2SFmquxd17t1X5Eo27yWJEZxzEU+v5manibbq6iKHITDGhOhJcj39vrCwAMaY
      YDzVGiP3QTOx7MGmMIZSqSTK9KjXquPrB/n+zWYzplzHlGB5mUpSiOSXlcaN6qwu960Sq5yx
      Qx+FahCp96fZh5KugeQZ7+1vvx6etxNf+tIEDh5kCJbIB1jqBabK4hh8du6nsKbeU7zfdF2K
      +qafaeIPiTWkfKp9Ja2u/fQ96o+ysCi2p1AowLIssYEGiV39Zm7btmHbNnzfR71eF7M1rVY0
      SdK1aTSljnGpd0XX9YRDA8mEpS6RqixGf6dxqLzMkgWBdhuhv2nWSNMB5Jefttzn8zn89E+/
      Fp/5zA/hne+Mx4eTmEIz8nLEi1g/6J15k2Zd+b6nB8l/MmDfKrMlzeDyd0oTU5NAIo1cgRmA
      qPdD9YIoM61arfZsnKH2T3H+hmFg5cqVIkOMJjy5UJdMFzIzqEwm3yvpGeVzmnogrWEaVK6k
      Y0nbWTLGYvtG9etP/YiqgpaGp5/+npgNn3gieXfzZOJPfk61FV0r9Bkuu8VOH4LRe+43mG8m
      abKI9aO8O7ltWhSnej21831fOCQpqYlkdip7QrN22m469P7CMITrumg0GkLBpvZyyqM6xn6r
      QL/nUI8LT7CssCQ9vMp1aof0guQML2IC0vopB7jfB6ViWnKqJOdcJHsvxZCvetWlYIyhUMjj
      x3/84r5tAcAwAlx/PfDe9w4hiQlksowRf4zoT3eGX0QSQ8rE3+8OaWJA0kSiOqLU65NEXIKs
      PAdBgFarJXaAkXeCIVqgcif9xiiPU64ZJI+P9EOKLSLmkmOgVL0iiZ5p9ZJXsh5HmDxYldjT
      XoyqJ5B9mFzjSQFM/UDLqW3bQgmSrUf9r13U62+5ZSv+y9um8PhjC5iZ0TA8zDE2pmN2NsKp
      UwZGRxk+9rFrsHnzKtx//7PQtFlEUdyc2n3C2KrReV71zmfHCSaMQAPM/HQ+KYY/iZANwxCx
      9rLntZ9+kjbZAYsMIVtqZMhJ+GljjMnjXbGHJkGqSysryNSPajmSReM0eia9hWhR5AQnEToN
      eil/AL0YlRM55yIgKm1lWQqUBkfJDMutlFytlvF7H3kLHMfB1NQ8RkaqKBTyaDZb2L37MEwz
      j23bNuHAweP45CcPIYriAXFJpksox8Rbi1potA8CMMEQIowilCtXIfSn4XhzyNvjaDnHUChs
      gdPaA9PeCMss9fbLBguO7ke8aQQAdJiAQknUChJp91GJN83alKR/LDXGNKaiGV+OY6pUKqKU
      o3ofWg3k6hMkihOoSjWwGFCpAb0x2bIy3E/kUBVTGYx1YrhrtdpA+7emgeq7k+6wHEYixsvn
      89iwYTWKxY7PoFQq4rrrXoVt2zYBADZdtAY/+7Pr48+GDpELpVm5r/y3xhg0vQTLyIFrJeTy
      qxHyEABHo7kHBtpoOdNgUR3NxlPg2giazV2n+0r6IsnMKJ8DENPBZJOg3Eb+PUlEWi6SGEid
      MInRNE0TqweVP6SSJuVyWVStVvunUA0SlzVNi8WMyfRMiVexaNAk7qXBkRiSZNJSX5T8Uhlj
      qXVFT+cFLmVxOd2+X/3qNdD1eBVsDojozrT7ys6vVvsECvk1aDV3I1+8bHF1YBrAbNi5VfDc
      SWiaJZk5z2zc9FP9XRaPxPNI/ygcQT0uXyODvqV6Lk2XUMfYb7xqX7TJNolAFEtESjZFCS+l
      x6jnk+hZJMQkPbAMOf5f7kiW5VTmkJWms0W0ruvinnsewokTJ/H448+h2WydVj+cc0zPzIhx
      tVpx4u9pjwQLjTyrATDttZ3nNkZh6jYcZwK53Bo4gQ/T4Gg506gM3YTAO4BcYctpjZvGp87Y
      qjVInZRkxqBjhmHAcZyeMiayx1dNVk9SZpcyQaaJO0nX0ibWjUZDOK2AzoxNRXlJ4ZYtWEut
      XKrxRdQKooZJHtgkjk6SB8ns2A9LhVYMilqtjv/9v4/Btg+iVsvj9a8/hN/4jesxPj667P73
      7DmI3bufRblk4f/+3+OiXPqgNvcYOEc+fzHAgXz+EgCAaVaha0VY9kYAHLbVYRDLvH5Z44zf
      Jh4u3I8w1d9VuZ0xJuJ5VEJVN6pQdTy5j6QxAhA7zDQajUT6oueQk6bkPN609y2LNfK45fay
      OEWrCYVWyBAmE1UrT5ux0+RBecDq4Kl+JWn2Z4LR0ZX48z/fgfHxIdx//wHcddcRfPvbD2Db
      thAf//jbUCwm73fGOcfc/Dy++9R+XLt9C3K2hX/7t+P4xjeiroVHjgqJW3QGcZolvTNdK4q+
      Osrt8uXnJEKQrSVpbeVvQTE3/So+qIwh00HaqqLeWx2j53nI5/Mol8uo1+sxs2US08lI0l2S
      zqnPLo+RMSZCZmhzEBU9wXD95Lm040mzgvpgFOdzpgzAGMO2bZsBAD/2YyuxeXauiCkAACAA
      SURBVPMK3HPPHvzMz2xDoZC+a3sYhvjYHzyAb9wXYuPGA1i5Usd3vsMAMBF60I/xlwLnlN6o
      mkOTg+QG7he9MzmwGE4yCCElye0EIg6SqeXZntouZe1JqhRNs7nv+8IfJMf0yGNJugf5jgCI
      coj9VoU0uu3HSEBKdehBOHwpYlFnHcYYXNc965tkXH/9ZmzfvmlJxjpy9BgefMBDFFk4eFDH
      wYPpbRkxxTLKGTLWjTflygdY8spFpL1PlWDSHEBpcfLytUn9LXc8apt+E6Ba9KpYLKLVaiV6
      n+k6y7Jim/HlcjmhBCeNK+3ZOefCeZZk6czn8+mFsZZ6aPl3tdYMY0zY7GlHESBenPRsYini
      55zjmWeOwff7h2DEfkr/7ddvTKFT+0R/Auvpr+evuJKtKnH9vgMhadVNEhfUEPXYcywxIaaJ
      xeokSdaXarUqmEDdf44xJkLcKWGKNvRLgixOJY2R8k6SrnddN75JnhwbvtSLSJLjGFvcGYSI
      nXMuNmegmo7nGnv3HcYf//EE1Lh/wukIKH2XYyyT8BOYZ9BRJZU1UceYZBGSz+m63qNTqHSQ
      FuaedL9+Y6Rwh2KxCGCx4jOB8ovlaFJ5zOr9+p0jsSvNU805jyvBg0CW9+Qba5omwmFVRmEs
      OVXuXCAMQ3zyk9/B/PzSq8/gAk+yrHn6kv7g6KeM0qyZ5t1Vvx39pD5pZ1D6ZvK5QSICaHzy
      z6R2juMI5ZQInnMuQmB834/tX5bP54UvKUlPSXsXg6CHKlSNX+5MXiWoHXnf+m2TeT4xceIU
      9u5tA+jdI1ZGJ7urvwHgxcLiRKIq0Ont0471U1rV7yPrEVTRTd6FcimDSNoYlpIgKCuLFG85
      TZP2DCMatG1bJN7Q+ORc8aUUdPl40jiNpBklbdlUO6C9qc5mDc+zjbvvfhjT070xN4ugPNxk
      k+4g6DfbDXItYx1LUTSAAUq1aqhEN6iimzaLUukS2Q+giiFLiUJpxE/iVlIaJbC4hZaceUbi
      kLqjZRpzJj13P3rW1BeaJmepbWzbFiHLFzJuuXkTDL1fyfUE4sBgFpBY+0Hbch4Lr1gO5O+j
      igNqO1mMUc8RZOKmc7Siq2mIalBj0n2BxRDlpHuRyKOOyfM8tFotLCws9JhKk4g/6X0QknIe
      0p4fkBJiEmXahBfIWCcX9ELeCV7GjTdei1tu1TE8nJwckwRtiRlORpRCxFddxfDxO9fjHe/o
      VKSgj8XBwVjXfY/F2SmtHxVJs5q6Esigv5NSE2WxSD2nMpFq5VN1hKUkCdu2US6XeyyBnHNB
      5GrqY9ozqc+WdGxQek6sDCe/WPXhLMt6yRA/0JkRPv6/bsPNNw9mgj0Tu33UleNvv72Aj3zk
      Gjz++Em4ng9ND8AB6IaPHTsmcf31c/jRH+VYu3YKWMbuNWkzftIsL4s4JNr0I1q5H7qOanxS
      aRM5qlfuX+5DrTJBcBxHBLZRGmSr1UK9XhcyPTGjGt+TpMzLinmauJdGz7QaAUoskJwokPRy
      aDvK84G5+XkMVaunx3iMAcgBCMSfaROu7BVePjiuuILj7W/fhPe97xEcPmKjw1Id5svlON74
      xrW48carsXrVKjz4zcfwL//yAnbuXAHONdFHPzaUg7rSqmgk6Qn99Jqk41S4jLyxVLmB+qTr
      kixESSArU1LNfrkv2dCSNrYkf4f6nJSZqJbUoU35xD7B8kbYuVwulsQs7zpOAUXnC889uw+m
      pWHH9dcM9MKjKMLEiZNwXR/j4ysRhg6IEJeUNlKUxp6ZVmljWQF+6wNXY8WKCk6e6u2j1dLx
      xJNzGBraj0qlilOnfHzf95UQhgFOnHBx8mQRnGvQ5FlLeh7aVfHIkaMoFAoYGxsVYQL9GDZJ
      4e08Zn9FVs3io7IqSWKMjDRTeVJ7tby62j5JzFNFI/XZiIls2+4xnwKd8A8qsGyQ3TWJwC3L
      QqvVEkkJ5xM33XQtGo3mQDPzxImT+OtPP4Zv3NdCEDD8xZ9vx4c++MMIw/vx5S9LTpeChyBk
      cF3FQcY5OIvb9fspk90jeM97hnDlFVvw1a9+F55nQp3JGYtgmR4ADV/4wqN47Wu2YtOmW/CT
      PxliZmYWf/d3T+E//mMBgW9LH7lz7fPf4/jVX70HmmbiyBEdd9wxine9a7SnVDilBaZVSqBn
      SZKvl2IkciwlWQTla5OSVfqJKer906xISb/LUCOOqawKiW4kChKDMMZgUK2dJAJnjKFc7m8/
      P1fohLUONpbxsTGsW7MCjLXgODomJuq4+uo8fv/33oCDB/8De/dqWLc2wi/+4mX4+n2Hce+9
      SpwIAMZ54koggwFA9+NWqw5uuvEq+H6Az372ADhfnCUvvriON75xFRjTMTxcwHd2HsH7fv12
      EblqQMea1avwK7/yGtx22ylMnqqjUDBgmjr27VvAY49N46GHNXzveyugaRzj43Xce+8Urtl+
      CBs2rEbLaQEcKOYLIguKLDn9GKEz/MEDAKmdGlIsg/KNzxZkD3XaKiaPX06hnJ2dFYWB5fOx
      PZMbjQZ/KSm1y8HMzDwmJqZx5ZWXiBc1NTWHubkFXHTRWti2hfvu+y7e9/6DiM/W3ZkoURbn
      GBlxcPHFOdxwg4mvfnUS7XYeP/VTa/HOd74OrVYbH/zgV3DoUB2Hj1Rw5ZUe3ve+bbh2+2Vg
      rFNi0HU9VKu9tvC0GTiKIuzadQCPPHIMW7YM4VsPHcZ/3sOxfbuLj37sZuRyNiIewdQNPPjA
      TnzxixP4r/91G666anMsGy9tJl5q5pfHRz/7lVgZhAGiKMLs7CyGh4fFbKyKaox1kt8LhYJw
      jqnJ/LLnW11BOOexSFd5rNSHkbbkvBwwMjKEkZEh8TdjDGNjKzA2tkIcW7u2AsMIEQTKR0vR
      RUdHXXzqU6/G3n1z+Ie/34+5uTLuvPMabN++GYwxuK6P6pCBU6fyePe7Nfzcz74JIyOLyns+
      n+/ZsUWVbVVomoarr96Mq6/ejCiKsPOJE9D1Jp56ysbH//Bb+O0PvQ75fB579uzHH/3RFFqt
      KgqF/bjqqs3QdA2u68HoLv1037R87yQLU5L5lNomyeZyX2lMt3v3bqxevRqcc5w8eRK2baNY
      LGJ+fl4US5uZmcH69evRbrexf/9+bNq0CdPT0zBNE+Pj46Lorjq2pJCPJD0BUMygr0Ts2zeH
      MFSD5FiqM2xmxsIdP/04PvjBw3jhBQPv/f/W4KptF4mXW6+3UMjb+MAHNuH973srVq4c6mt9
      We7ko2kafuu/vwl33XUF1q/38NBDFv7ps0/i0KGj+MfP7karVUA+38RzzzXwuc89BM4BTdd6
      +gB6CVi15avKaVK703kWmvGpPqyu6zh06BBmZ2eRy+UwOTkp9JgTJ05g7969GBsbE/fct29f
      opVStSgtBcYYWLPZ5GrJ7FcSjh8/ibf/6APgnOH224fwyCNzqNeB2VkLOTuE55nQ9RDVqoOZ
      mUJPyPLQUBvbt+fxh3/wVuRydl9F7myjXm/gYx/7Jp57bhK+r6NQCHHypAnHtbFm9SSazSr+
      9K7rsOmidWJbUlVskIllqdlSbZMEktmTiFAWXXbv3o1qtYpCoYCJiQm4rouxsTGsWLECR48e
      RRRFGBkZQbPZxNzcHAqFAoaHhzE1NYV2u43rr7++Z+sn+Z5kAZJjm2TQKqh/+MMf/v2znaTy
      UgHnHE8/sweHDs7ggx/eine989V423/ZjO979RDuu+8Afvd3L0IUuXj/+zfj+PEajh5TiZrB
      dQ1s317ArbduwcSJE520z3MUFGjbFnbsGMdXvnIMR47kUB3yccutwLPPWlg1voCJiZXYteso
      rr66gJGR4cTMsES5OQwQhGF8/zNw+N0K0P085WRSTzou/z46Ogqgs/FGsVjE6tWrMTo6KvYa
      Gx8fh2VZKJVKGB0dFZUiCoUC1qxZIxKu6Dnk8WiahlKpJMKp5bgm+SeAbAUgS4m6+8lXv/YU
      bvy+S1CplHHffU/jAx/YjyDsJey3vsXGRz/6g5iZncfvfPj/4Td/8/W49NKN50yv4pxjZmYe
      v/f7D+I732nhtts4nn6aYXy8jid2DsN1LVx6aQ2f/pu3g0tlBVUlUu7PDwP4QQAODl3TYBsW
      ODjangsGIG/noLHkFUT1E6SJI0krD+WSLCwsiOMUmJe28shMTBga6oidtVpNFOrNdIAUUBEl
      VZl685u2C0vNwoKDKNKU3F6OsTEP7/mJy+H5Pu7606+gXi/h4MHJgc2KZwOMMaxcOYw/+eMf
      wm//9igmJgzceFMBN960EpsuPoFSqY79+4t45JFnY+bEiHN4gY8wChFxjkAielM3kLdzyJk2
      TN1Ey3WEP6KjGy3em34mESLdS26r/i4jCAJR+Y2uHUTXUGd/MgWHYYh8Ph8bHwAEYQjX9xBG
      YcYAS4FzjgcfPAWObuUxXYemhbjjpyr4p3/8QaxbN4Kv3/cwTpycw2tey/D93z+Yp/pso8PE
      ZTzyiIn/+PcFfPeJGiZPDWPTpnmMjET4u789AM/zBBMQ8Ru6Addz4fgeHN9FQAFpAHRNg65p
      MA0DbW+xcG0QBsLkSe+oH9MneaLlUu2EJKVbJV4Z8nG6h7xPcT6fh2EYyOVyol0YhnB8F34Y
      oO25GQMshc7mD073w4fIFxx89H+sxy//8i2YX2jgc59/EH905wS+++RqfPlLLmZm5s/bWH/o
      rdfi2muBQiHAQs3HZZeV0GgYeOe7LBw6ZOLrX98lxAlD08GjDlHapgW9a5lxfQ9u4CPiEYIw
      RBAGsAwTBTuHvJVDMVeAqadvUKIiichJT1iuA05ubxgGqtUq8vl8TI+hoDtN0wThyymXju9B
      1zQU7BxWj46/tBkgDEP4S2yafCbwPA+f+MQ38MyuzmsaGnLxZ3+2HT/0QzdA0zX84R8+ik//
      dR2tVg7VoRbe+961GBkZftHGsxQsy8Lv/M4OrFzZgusC266uwjRXYMuW9fB9A3//90fRaDQ7
      G9zpOkyjY/zQNA2Gpi+WY+ccGtM6ucK03xfrrAYM6VGpQK+yu5QXOu3aJMj9lctlsbeAfI6c
      X5R/HoahKIMYRhFs00TeysE0zM4ulUu80wsa9UYDzUbjRembc46//4dv45//uSWcZFu32rjy
      ik1gjEHXNFx33TgMI8CWLQ7e855R3HbbLbCs82tRGxsbwo03lnHgQB6G3sIv/vIlmJycxg2v
      djA1ZeKhh54RcrLZrQrHOYdpmMjbNvKWDbCOnAzOYRlx/UiebZMU2bR2g+gAKsP0cxTOz8+j
      0Wgk+gI0TROeYzmZvyPS6WKvijAKkzfJe6lgqFpNlC/PFEEQ4Gtf+y7u+cIEOGysWePjR24b
      w4//+HXCwsEYw7t/7Frk8rO48dXXYevWdReER71ULOG2274fd//DQyiULNxzz7N46rsM69cx
      XHttgC984STe8IaObZx8AwSNaUA3VFxPSayXld004lfb9PMWy1AD+whJhbfU+8ngnMdWABmW
      ZQnFeHZ+7qW9AgCdhz0+MXHW+pqYmMSv/ur/w4c+fATHJ0xce20dH/ufV+CHf3gzqtXFYLwg
      CPDMs7uwccMILrts/QVTEIAxho0b1uOOO8bQbFg4McGxfn0dhWIbr7t5FMeOcXzkI1/EgQNH
      oOud2VD1DMt+jEG9qmr7JOKX70G/q8eS3mOagy4NhmGIkGfavVLuq1arYWFhAaZmZH4AGdPT
      s/i5n7sPBw91ZvlKxcHdd78GGzcs7h0gfwzZ63mhYXJqBjt3voB/+9fHcfOtl6PRaODkyQa+
      /rUcPC+HcrmNN785h5//+dcin8/HFMU0QusnutA5ORo0bXVWV48kTzPhdKJLKa/ZcRyxgZ8a
      8kH3ekmLQGcDURTh4MFD2L9/EvMLfpf4I4yPu3jb26pYv25tj7ltfn4Bw8NDL1qlu7OB0ZUr
      8KYf/D7ouoN//ddjOHQoj5tvyWNsbBpHj66G45j4whcAz3sAv/mbb0kVP5KgzvBJ5VaSjsvX
      pDHGIPeW2yb5Cci52Y9hKRTkwv2C5wCu5+GuP70fn//8HDg0rFk9h//23y6Brs/i3T92G8rl
      Uo/s6vs+nn3uIF732u3nc+hLgpTB173uJszOPYA7P97ErmcCbNhowjQX0Gi0MT29FkNDFQCD
      pU7Kfcvlx9PaJIk/9PdSaY/97p10n35t5HurYzKo1vqFuIy/WOCcw3Ed/NmnHsA//mMLt9/u
      wXVXYHTUxdvedgXGx8ZSM+BM07zgiZ/AGINtWTh16iQ2b9Zx4EAeP3r7GP7xs9MwzQCMRZid
      dfo6m/r1TehHP2qfhUJBRIPW6/WB+lD7k2dw8Zy2LTYATBqj+nxC56DE6lcCiPBPTU3irru+
      iCd2HsAP/ECA229/Nd7/vtdh7dq1+Oa3nsCjjz32snknmqbhHbe/CcViHYV8G3t2B3jTDxq4
      5ZZxcK5heDgXU0KTTJZp4Qf9VgyV8OlvqgQhE7+auJ7Ulzw+mfg57yTJFAqFvpXH5WeImWcb
      jQbXNE1kyi+1j+9LFZxzfP7fH8Xdd+9HFEX4mZ9Ziy2b12H16lGsWLECmtZZ1g8dOoKhoQos
      20apW8D1pQ7OOT73uftx9NgMDh/28Vv//Vbs2nUAd999DHfeeQtKpUJqucEkC4yqwMr0klRV
      ThWT+snn6sqStBGIqkQzxmJVK+Rx0Xj8MICuabEgPsa6+QBkF6UbXsjK3eni4KHD+Imf+BZ+
      8AdW4rWvXYOtW1egXC6nlul7uSEMI9TrHcfR0FBFxMqTBJCkXKrvpV/6IUFmALk/tZ9BHWNE
      j/KMn+RTSLIqMdaJTmWaJhiAwjjo/MveDHry1Ckcn5jEtisvw6lT01i7dpWYGaamprF69arz
      PcRzgiAIesqcUNkbIE5Y6sZ4MpKcTsJA0N2F3uwzgaaJOmlKMzEAMV9aHSR11aK/5U3BqU8Z
      L7+pvotndu3F4SNTGB6ysX7dGE5NTmLdurXivGEYrxjiBzqV2TzPE5uPU40f2hsAkBTDlJTJ
      JOKXfw9OI7y4n+yftEqousdSlqQknQaAWFUuDPflWULEOZxuoagHHnwBf/kXe3DJJWuxceN6
      rFu7dukOXsaQZ0EScU3TjJUZVGdJx/e6ZeMRO54Exhjylg0eJRerUpGkJMt+AvVc2vFB70GW
      IiL8fD6PSqXy8lkBOOc4cPAgPnXXA9h+3QicNsdf/PmbsWp8/HwP7YKAbduiihzQIQjaTT0J
      ImGEMYRRBEOXokW7ECIT7+zBpWud5CLHdUWqlakb0DU9RtxJugOQvttNki6S1ocMeWM+KonI
      OY8Ze06LARzXQRCEKOTz5z0Gxg98OG0HbcfFX//Vt/C7v3s7bNt4SRXwPVfI5XJoNpvwPA+2
      bUPTNJTLZbEdEYExBkM3EIQh/G4+gK71qQzIAT/sWJF0TYdhGGi2W9ANHUEYomDnoLP49kvy
      vVQxJs282s+5lrQ6cb64/VOpVBJ9kLdY1/XTE4EYY/D8zsZly3GenE2EUYRmq4WHH/422o6L
      Wq2O3/+9d2J4uJJYg/6VDsYW98xVSynmcrmeOjq6psGifAHWv4YQY52kGr+bKWboOkqFInj3
      Pm1vMdMsCapyTv2qVe3SfBVJeoCsz3DOY4WEHceB43TK5Z+2FYhzjoV6DeVifPPrs+lVdj0X
      ruOiUum46xvNJoqFQnfLzBaazbaw6mQYDFEUod1uIy+t3kQgtHOjbHJseQ5sZQUYxGvcmSR9
      OK4DpneYiRhqKWVa9SukmeVVsSoNcnW4arWKZrOJIAhQKpXOjAHkgSQ9gOO6sLvltWnZUbld
      7XN+YQGVSgWTU5P4ypcfheOEuObqTbj8VZfg1MlZbNlyUapVIsNgoK1r5Y0LiQmazaZYIaIo
      6sj3vJMoLzu2kixESaJNGEVw3E5lBjW5RkYaQwVB0FPXp58HWu6L2tGYDcNApVLB3NycOP+i
      +QHCKESz1UIxX0Cz3UKlVEar3UauK3s6jgNN03DvfY9j00XjOHb8JHbvnsWrLq/ilptfiwMH
      DmJoaAiVSgUzM7NYtSo9PifD8pHm6OrULl0sua4qrv1MlklKLrVvtJqwTAtMY2IlkEMg1EmN
      rpMds6ozLEnkkcdCkMPWh4aG4Pu+2PjjnDjCfN9Hy2mjmC/0PMyuXfsA5iLwOQAT11xz6XlX
      rF/JaLVa8DwvMRaKc46IR7FwAjrez7NL37rebIDpGnKWLTyySYwoH5NFINn6k6QMy/eWGcD3
      fcj7YFDc0Pz8/LnzBNN29fQwU1NTojpYhgsHnHPUarUe5xih5TqwTROGbvScX8rL63gugjCA
      YZjImVaqpUfud5BSi0vdX44nov4rlQpc9xyWRSEZjJAR/4WHMAzRbDZhmqbYAVT1wNqmBaC3
      Hg/9nmafZ4whb+dgmRYQxnMJkq5TZ/dBCD2N+dT+gMXNujNZI4MAxdrIZkIgbnakYlnqOVVH
      SJLReVeZNkyjxylHbeS28rgG9RGokL3I8jVUJCxjgAwCjDGRsBJFEShZis6pCKP4BtoE9feO
      NShEy+0wlaEbPYFtSeKN2ofKGKq1ZyndUfUrnFMRKMNLA1RxjXaHjHiEMOoklsd2qIxCeIHf
      Q5xpXlpN04UZlDEmIjyTVoG02Twpx1gVceTVSP1bjXdqtVovn1igDGcPjHW2xAU65ks/DKCx
      ThQpFZ61ulXiVOUySTwhwlXLxlOBLvm+6u9qQo0sAvXzQ8grQpJeQu0zBsiQCKqxr2maiBNq
      tVqwbRulUgme551x9uAgGYi0WpwJ1D5kxskYIEMqSCcwjI7SSuVGXNfFzp078cgjx9Fs6kBs
      3xwGlZ45OHjUQquVg2m24Xn5xPaL18nKdKdS3eKY+o/ZtttwXcnDDYDJPxXJKmOADH3BWCeO
      Xtd1zMzMiGC6Y8dqYCzCM88M9xBVTBzpUl8QNHDqVBGVShMLC7251mcrrGVoqIH5+cX+ifDT
      kDFAhoGgaRq+8pWdGB3NYdWqFdh29cXYu/cBcD6MiCsyv/Q7j3h3U41OTBFH56dKmmzAIErO
      OcBSNrDt9itbixhjiBSvtbgnyyrDZRgQjDEcP67hc/86g+nZ/0S5OoJq6QBm507AMkbg8yKq
      5XWoze9C222iUt6A2tyzMAsbEHoLiJgGYAzgJJDEwQEgQbmNtSHi5V2mAkS5dhoj512zKUjk
      6fbZvU606zJKZgbNMBAYY/jhH96MKHJQqzk4OTGFoxNthCFD4M7AaU+BA3CcBip2AT4rgzMT
      WjiLkOkitdL1CsjlOju195K4hyBsIwpn4biTADjAPbTaB8ARotXai5BH8Nxj8IJ6qmhD7BVz
      zqnxSt2rMwbIMDAuvngNioVpFMqXQ2MMhrEOod+AkVuLyK+B8whACDdwYGk+oFVgW8MoFNbC
      ac6DAfDcPAr5OhjjPetAfeEbaLROot7YDc/Zh5BzNOpPwNSBhYWnYRgWGrWdqDdegOseTQ27
      AHiMOZJMtB1RKtMBMiwDpVIR265Zg6mZOZjV14OHC7CsHDT4WDF6PZr1gxgd3Y6W20TersBY
      eQUsM4dG/QhWr70Ms9NAxHXMzY+hWpnB/MJKAIuzcaFwJRpuAEAHeIQwihBxQNcrAFrQmAUe
      noRmXYbQP5k8SIny+4VZE99kK0CGZeGyy4dRKq+FZdqw7FHk7DIsewVyVhHV6mZoRgmlwhgY
      M2GZeQAMpfLGzhZMQnllaLXLWLXq6OJKwACm5aDreZhGDpGWQxTMIpdbg3pjD2y7jJYzAbu4
      HSZqMMwxAAkBcDGTaW+M0eJxhsA7nq0AGZaHXK6EXP4wfK8C31/cMIQUSwYWM9YLhZTJyUwM
      vp+D4+TAOUWEAkxfiWIeYOhU8giCBZjmKCx7IwAgn9vYHcSG2H17wqJTqleoYRqGtTZjgAzL
      w+joMI4fWwnTbGN4uA7PL6FjY9HAEMEwGghDD0EQgvMIJOkz5kDTfAShTHIxFxVIGCLTpWFU
      0c+Kr87+nHNYVhvV6lTnb3G1mnDTdbAh0wEyLBOdHRc1eF4Bvj8FHjUQhBFME3BdvXt8SMz8
      BAaOanUSM7Nj4pimhRgZOYm5uTFEkS7YQIgs3d+1REUXog2dZYzB8/JYWBiNne93fcYAGZaF
      eoN2jWeYmRkDWdy1mLy9SPxE1IbpoN3Oxfqam1sFXfNRLNbQqA93RBTOF1cNECMwMJCIJYsy
      skIrO7joNAdjGjgiMGidcXEfjBmIIh+MaRkDZFgeZqbd+AGeFPsDQY+cdZjANJuo14cRn7M5
      wsiAaXgwTA+Bb3WInEVYMXwKYRiv5Ny5gpiD9RA+ABhGAIDBaT2DptNCpbQWswu7MD76VoTe
      ISw0j8Ewh6HDRdutZwyQYXmYnZ3F7OyjsKxRBP4sIljIWUXU6ocwNv4DaNaehB9x5K1htNx5
      VCtXoLbwTVRxNRg0hVw7RD03P4aVIycQRhqi0IBheAAY5hdIXOIxxTbqikiaauUBMDzUccjl
      8lvR9p6Caa2DZR7ono/AozaAcfBwHtXqtRkDZFge6nUT5eJ61FpTWDG0HVPTj0LPlVAov6rj
      6PIbMDQN9bYHQ9Pg+fMAANN04btKaKcAw+zsGDjvJtoDqJRnYudlPVYNppCtQBQKwZjWFXs6
      Fige1eEHHnRjCAwcIddhGcWMATIMDs45jh09BT9k4FEDM1PfQLl6E9rOJErlNWAsgm1V0W6f
      Qq6wCbahox20YRplId8rPXZ/MkH8AqreKklOHX/CYl9RAlNF3EClej0iDlSrrwEP52DmtiBf
      kPICkCnBGZaBVquFY8dz0LUmhod2wHGOIQprKJY2QtcYWq2DKJYugZnbAMsswXEmMVReiyga
      hWXU0UR89ia3WMdP0FvjJ/Am0HJOwDBHkTcN1NozWFHdhkb9Kfihi5w1DNebgp3bhGbzICqV
      q2PjjQXK6St6vL5ZRliGZeGFF45getqCnevstVAoboYsjBSLlwAAbK2jlLatBQAADk9JREFU
      qubznT2Wdb0EjTUXiVHqk3PeM9kTDGsNioyh6cyiGSwAUYeEw7ANmwWYq+9HKVdBGMxC0214
      /ixsG6hUZpAcMB1HEJgZA2QYHLOzLoIw3TUlx970s73LIPldDmHudAZEwRRqjb2oVq5Ao9mE
      58+B8xAcIfwIyFnDMI0CHD9AIb8e7fYEfH8dGo2R7uwPyNlliioB0/QyBsgwONaurUDXQ4Sh
      1iFwTpb5DuSY+0EQS2KHylgMYDYK+XXg3MRQ9QaEYRPt9mGUy9cgCD1YRgmON4tybhSBP4Fq
      9RoA0z3MF48AXTzn+3bGABkGx6ZNq7HjooNoTrako3Fic8sVoLRS8s52CM80gfFV9R4Gqddb
      aLfV/X05OA9gGCPQ9cVdPHW9hHy+s9GF1RXoc/YqcM5h2+sXr+YcrfqjgLkVkb8fITcwVL0G
      U9NfxdjoWxB4x1BvHoad25AxQIbBkcvl8NqLIjQOvQCas9XsralN26BduqkrbjAh2miM9Yg5
      jDE899wBHD06jJUrW6jXc3Ac1lWKp0WbnnpD4Oj+H4z15hMzALpmwgnaiEIdOm+h2XweIe/W
      O41a8P15MH04C4fOMDgYY8iPDNNf4pjqje2YKZloxmLHIV23iKEhE+94RwWGEXbPczAWQtNC
      aFok/YygsQhM655jYbddpw1jETQ9gmWVARaBh02EUYgw8OA5M2i2FuD78yiWrkKrvi9bATIM
      jjAMsXDoeHdGBgRpd6f1ziF1NlacWJLSKzPBgQM6NmyYQaEYoLZQgGEaWL1mTlx68cUBxsdX
      gG4ox5DSfTg4NFYBRwhE6+CHwDNPtfH87jHYVgWGuREMM9Bz18BzJrBi5AcyBsgwOGanp9H6
      3kEYijmTL7OkSVKpkijScP8DOqLIAgfgecOxNqWSgzVrOnL+YuiDEvAsOduI0fbuaYEh161O
      XgJj5U7V69zaTrn+ZY08wysa1eFhlC7dCPfpfWLmFZafbuUFjrg1SBV1yO4fl+k7BByF/XYA
      WszqklNfetxqSiJMoRBhdLQFoAU5CI+QMUCGgWFZFm794HvxxTt+G4YbLIohjGHfwknM+R7G
      wqtgLBzF84cOYeP6LZib2o+ZZoii4YObZVx1+Q04euAJTM3PY92GS3Hk4H2Yrl0BPVqAExpY
      PXYdAGmFYECzvg/NdmejxGZtEtN1B+vGRnHg8H5ctOkyHD/8PMbWbkXRtjB16iBgDcFmLhba
      IZqNJo4edTA0dFl3o4xFtTeKokwJzrA8DK0cgTZcEn8TE2yujsNAhJBzOE4Lhs7RaHvQeIjN
      W65FvT6L2sI0OIBGYxb1+gxypXHoWgUrV1wO8AArVmyL3YsxBsY9MH0Iew4cAOccz77wXURz
      B3H/ow/AaUzjmZ33Y7LexIlTJ8AjD4cnjuPQ3ifRcl0cO7QLbbcFDTNoOj4cJ0AU6XDdCI4T
      wnUzBsiwTORyOeTXjkHrWnRopt49dwy2VUWhOQdoBsZG16BRm0Wt7WGowGDmViJnGPCDAB7n
      2LhqHI1WDY1Wpx8/jGAZZk+pFA4LkX8Ca1aNAACGyxVMnDiI+YaLizeux/PP78amzVdi8uQh
      cATQDQsAx8jIOPIsRGSMIuI5RNECDMMQ+kMURdB1HfqHP/zh3zdN1RGRIUMyGGMYuexi7H/w
      22COL5LSdU0H4xza7CS4zhFUVmPDxq0YHh6HYRZRKRWxYnQT5meP46KNV4CbFYwNj6DlMLRa
      FeRyK8G0RToU0nrUwuT0LqxfP4JcXkPoO4jsEVy1ZROOHJ/AFVffgMnjBzC++mL4ngu/PQer
      NIrG3HF4zEZt9hROnIhQKFwEHkHsHK/rekcZPleb5GV4eeGRL34Vz/3x3TCCCFoYV1A5gLl1
      axFc8yboZmExXr+rs8p5us8+ux/HjnXMm53qcZ1GlAATdZXmHTvaWLWqgmKpguRoJI5Ws4FS
      qSLGwhjDN7/5PJ56ajihfRYNmuE0cOrYQXzr/q+jsHEHKu+6Gff+2d0Y5zrqYYCckYfjNTCc
      H8ZFx4BnT3wKE+NbsGrdpZibn8Hw0CrMzZ1AobIal2y8VPQZr+7AeyI5O8nxQLFUVUbDQZkB
      DAylUkUwzCCFdhljmQ6QYXkYX3cRQi2PN77mamy5Yis0GJitHcZCCPhRxzI07TQQcUCbmoL7
      3MOYntyLoRXjmDh5AhvXbkCtPg/ZmEmrBqP/SSUPNdZJuO9Hz/IpWlkizkWiTNJ2S4RsBciw
      LHC/CW4NwWQRLrn8MpQ2r0Zr1yxG7QIabgNjuRKm3CY8HsLhHK/SDMzsfQ4zPEIhtwZzrajT
      Rzcws1h0sG7t/GL/SBZwFhZqeO7ZQGolozd9TNddBIGNVquJ4WE/pS3PdIAMywMPA9SaDoqG
      j93H63AmD+OxD/45gnYTlpFDGHrgmoF5t4mxXBHzvoeVVg4TCKB9/zvR4jrypTFYpgGNMczO
      HoGur+n03b1HkgizZ89hHDnSEYHkJHhI16B7HQfHUPkQIteEyhxOUEDLXewnWwEyLAtMN1Ct
      dPwAV2wZRnP1Cjy3fgzRoVMdotXz4JyjVKiCg2PULoABWAsL7W9/Gdqr3wzdNAAeoNGc6ohK
      sTskrwEyP5ByHKv9JsUYAcA67xRuaO3pnAMQ8hAHm/OYWLUDO2dHYFrrYBr5TAfIcGYolkrY
      8QvvBjeSwxjk8IR828Pwt7+McPYwwtCF4+gwjXEwLMr66flmiG/Huti7OIduaDRjDBrj0Dmg
      c0DjQNtzsMrKY+/MYejGGOr1p+C2XsgYIMOZY+vrbsD6n3xrdwukrvhCIdFdhxk5zizHg/Wt
      L8CfmwAQIvA9+EFHRvd9F1Hoo9GYFZtwO+0awihCELQRRj4i7iEIOxtuU78E2XqkIYqNsWzm
      sbc2hYuGNsB39iCX34SFxt6MATKcOTRNw43vfhvC1cPgZH2hYDipHWMMjt/C1Pwcjn71s2BB
      GxPHn8cL3/sWPLeGb9z/WUwcfQLHJ48ijDhCbx7HT+zDnv07MT15ALMzj2F+7nEszD4WI28t
      YaMMjcUtQJPtWXjMhO+dQNtrgUHD2NhtGQNkODsoFAqoXHkJguEiQl2KDJXEFs45ClYJZZ1j
      JSyUj30Pq8Y3gBk5HNj3GMrlYdjFMZS0No6eOgFmVjG+YiXCIMLKlavAtDwYdORMBi+IF9JV
      QQxAjDFeWIkbV6zBxYUVWLf2ehTy4wCyTfIynCUwxvD6X7oDx44dQ/3UNA7/+9fh758Aczri
      DZFp3ZnHd+ZmccPK9Qinj+Kxowex4dI3YLi8CfXm4wi8FppOG+WShvrCcRw7cRimYeGFp78J
      03odeDiNph9gRJfCJRJCr9UijISttQmsz30Jz1fXYypYmZlBM5w9BEGAubk5VMplmJaFp+5/
      CM98+l/Bj06LyH36qTGG5zZehtwlt/YUxeIAeFBHwzNQLRYQcY69e47g8JGKaEemUloF1FTL
      VxcfxFXzh/uOlyPbIinDWYRhGBgdHUUQhtA0DeNbL8Htf/UHKF63FWCLsrrGGHxTg7n60phH
      GFjMG2ZGGdVi8sQck/ZTCmuxlBVA7SdjgAxnHSRRaLqGUqWM694bN5OGDAg5B5wpaFovCRIT
      kEKtmjypjeoQG0QEUpHpABnOOogQV69eDc451l+yCavf8xYYhRxyQ2UUh6pwOMepbxyH7/vQ
      dUtcK1eJi/e5aPLsCXSj9nJluowBMlwIYIzBtCx8/x3vguN07Pecc+i6jq2v2op9+47i6WdO
      4NhRHxxlaExf9Oqi14wqe3uHCidhMa97bLEdRwTfr4nrwygEYzrc0IOuGQAPEYIhrxsZA2R4
      8cEYg2maaDabsS1Li8UirrxyCy67/GK0mk1873uH8dxz05icZGCsSBd32wOAh1/4hRxWruzE
      94cnG5j62/+E7ocxc+iz88fgRwFOlddjzAC+NrEL141fjn0Lk8jpBiqGgUmvjZtGsspwGc4R
      OhUaCoIJGGOwLAuMMfi+D3CO66+/HDfcoGFqahoHDpxEGC66u66/fj2CQMNNN21FodCJN9K0
      bdg1NoLn7vxbGF636hvn0AC0wqgz88PEluIwGDQwcJxym7i6uhHHnSZ8nolAGc4hLMuC4zgI
      wxC+7wtGME0TrVYLYdgh4qGhKnbsWNFzPc3yrut2y67ruOr1r4GZs/HdOz8Ds9bu3EczUNQ5
      gshDKzJgaAZ0psHWGNbkq3i+NgVbM1D3ncwPkOHcwnEcNJtNAEC1WoVhdOZg13XRaDR6Ksal
      ZXZRO2KgF558Gk9/4P9AjyhYjsEPXbjMQkln4hoZc147M4NmOLcwTVMQdbvdFkRpmiY0TUss
      pMU5RxRFMQWYzkVRhCAIsOXqK+GNdXau7wTjAWExD3NVBa6pLR6XMGxl4dAZXkSoBAt0qjKU
      y2UYhgHf91Gv1+E4DhhjyOVyiTO+nCIpHyNQiZPrf+kn4OY7pU/ato43/vX/wDv+//bOWKVi
      GArDf29zI5JbitrBxZfQ1cnR9Y6u4jM46QP4BHcUB8HRyUXfwNdQVERIpND0nNShtjetcZQr
      pd9SCKFkOD/nz0nIubzAweIcbicLrnG0QCN/BhHVT48Egto5B2MMiAhSSiilkOc5yrKE+74K
      7R92RVEE51xHDJ2ONJMJhBB4e3rG4/UtZtsZ9o/mICIIIfD+8oq7kzOsfRYdUa5UAKFLTCPD
      xy+Faq3BzFBKQUoJZoYx5mdPAD9ovZ4B/hdYWimgFiAztxWn+8UVPm4eOv/7FxYolCpHhgsz
      dwK8qqrWBk2nUyRJ0gaxL5Y+oTEiQlEUsNa2VaVmr7A7PwRtzjrzVyqAJp2FPN7IcInjGNZa
      aK1bW+Ocg7X1qa4QAmma/tpLoKGfFfoZwx8jImxkW9g7PUa5vtyIfwH+tgZuPT9w/QAAAABJ
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
